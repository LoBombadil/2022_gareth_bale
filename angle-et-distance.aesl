<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<event size="1" name="angle"/>
<event size="3" name="data"/>
<event size="1" name="distance"/>


<!--node Thymio on Melkor - 41044-->
<node name="Thymio on Melkor - 41044" nodeId="{e187137e-26f5-4c6a-af0e-3a09f63b7b90}"><![CDATA[var switch=0
var amorce=0  
var cpt=0
var cptangle=0
var bit[4]=[0,0,0,0]
var nombre_du_code_lu
var lecture_de_la_ligne
var lecture_du_code_barre
var angle
var distance
var bool=0
var cptdistance
timer.period[0]=100
timer.period[1]=750/2
lecture_de_la_ligne = prox.ground.delta[0]
lecture_du_code_barre = prox.ground.delta[1]

onevent timer0

if nombre_du_code_lu == 2 then
	switch=0
	emit distance[distance]
	motor.left.target=0
	motor.right.target=0
	if angle==0 then
		motor.left.target=300
		motor.right.target=300
		bool=1
	elseif angle==45 then
		cptangle=0
		if cptangle<10  then
			motor.left.target=100
			motor.right.target=-100
			bool=1					     
			if cptangle==9  then
				motor.left.target=0
				motor.right.target=0
				bool=1
			end
		end
	elseif angle==-45 then
		cptangle=0
		if cptangle<10  then
			motor.left.target=-100
			motor.right.target=100
			bool=1
		end
										     
	elseif angle==90 then
		cptangle=0
		if cptangle<21 then
			motor.left.target=100
			motor.right.target=-100
			bool=1
		end
										     
	elseif angle==90 then
		cptangle=0
		if cptangle<21  then
			motor.left.target=-100
			motor.right.target=100
			bool=1
		end
										     
	elseif angle==120 then
		cptangle=0
		if cptangle<30  then
			motor.left.target=100
			motor.right.target=-100
			 bool=1  
		end
										     
	elseif angle==-120 then
		cptangle=0
		if cptangle<30  then
			motor.left.target=100
			motor.right.target=-100
			bool=1
		 end
	end
	cptangle=cptangle+1
										
elseif  bool==1 then
	if distance==0 then
		motor.left.target=0
		motor.right.target=0
	elseif distance==10 then	
		cptdistance=0
		if cptdistance<3 then
			motor.left.target=100
			motor.right.target=100
		end
	elseif distance==20 then	
		cptdistance=0
		if cptdistance<6 then
			motor.left.target=100
			motor.right.target=100
		end   
	elseif distance==30 then	
		cptdistance=0
		if cptdistance<9 then
			motor.left.target=100
			motor.right.target=100
		end  
	elseif distance==40 then	
		cptdistance=0
		if cptdistance<12 then
			motor.left.target=100
			motor.right.target=100
		end 
	elseif distance==50 then	
		cptdistance=0
		if cptdistance<15 then
			motor.left.target=100
			motor.right.target=100
		end
	elseif distance==60 then	
		cptdistance=0
		if cptdistance<18 then
			motor.left.target=100
			motor.right.target=100
		end 
	elseif distance==70 then	
		cptdistance=0
		if cptdistance<21 then
			motor.left.target=100
			motor.right.target=100
		end   	    
	end
	emit angle[cptangle] 

cptdistance=cptdistance+1

else
	if  switch==1 then
		if lecture_de_la_ligne<200 then #si gauche voit du noir, alors il vire à droite
				motor.left.target=50
				motor.right.target=0
		elseif lecture_de_la_ligne>700 then #si gauche voit du blanc, alors il vire à gauche	
			motor.left.target=0
			motor.right.target=50
		else #sinon il va tout droit
			motor.left.target=100
			motor.right.target=100
		end
	end
end

if lecture_du_code_barre<500 and amorce==0 then #dès que le détecteur droit détecte du noir alors 
	amorce=1
	bit[0]=1										
end
onevent timer1	

#Lecture du premier code barre
if amorce==1 and nombre_du_code_lu <2  then
	if  cpt==2 then
		if lecture_du_code_barre <400 then
			bit[1]=0
		else
			bit[1]=1
		end
		call leds.top(0,0,0) 
	elseif cpt==4 then
		if lecture_du_code_barre <400 then
			bit[2]=0
		else
			bit[2]=1
		end
		call leds.top(0,0,0) 
	elseif cpt==6 then			
		if lecture_du_code_barre <400  then
			bit[3]=0
		else
	 		bit[3]=1
		end
		#fin du code barre
		emit data[bit[1],bit[2],bit[3]]
														
amorce=0
if nombre_du_code_lu ==0  then
	callsub lecture_distance_et_couleur
elseif  nombre_du_code_lu ==1 then
	callsub lecture_angle
end
	nombre_du_code_lu =nombre_du_code_lu +1
	amorce=0	
										
elseif cpt>6	then
	cpt=0			
	call leds.top(0,0,0) 	
end
cpt=cpt+1	
						


end
sub lecture_angle
	if bit[1]==0 then
		if bit[2]==0 then
			if bit[3]==0 then
				angle=0
			else
				angle=45
			end
		else 
			if bit[2]==0 then
				angle=-45
			else
				angle=90
		end
	end
	else 
		if bit[2]==0 then
			if bit[3]==0 then
				angle=-90
			else
				angle=120
			end
		else 
			if bit[3]==0 then		
				angle=-120
			else		
				angle=0
			end
		end		
	end
	
sub lecture_distance_et_couleur
	if bit[1]==0 then
		if bit[2]==0 then
			if bit[3]==0 then
				call leds.top(16,16,16) #si 000 alors blanc
					distance=bit[1]*10+bit[2]*20+bit[3]*40
			else
				distance=bit[1]*10+bit[2]*20+bit[3]*40
				call leds.top(32,0,0)#si 001 alors rouge
			end
		else 
			if bit[2]==0 then
				call leds.top(0,32,0)#si 010 alors vert
				distance=bit[1]*10+bit[2]*20+bit[3]*40
			else
				call leds.top(32,32,0)#si 011 alors jaune
				distance=bit[1]*10+bit[2]*20+bit[3]*40
			end
		end
	else 
		if bit[2]==0 then
			if bit[3]==0 then
				call leds.top(0,0,32)#si 100 alors bleu
				distance=bit[1]*10+bit[2]*20+bit[3]*40
			else
				call leds.top(32,0,32)#si 101 alors magenta
				distance=bit[1]*10+bit[2]*20+bit[3]*40
			end
		else 
			if bit[3]==0 then
				call leds.top(0,32,32)#si 110 alors cyan
				distance=bit[1]*10+bit[2]*20+bit[3]*40
			else
				call leds.top(0,32,16)#si 111 alors vert bleuté
				distance=bit[1]*10+bit[2]*20+bit[3]*40
			end
		end
		emit distance[distance]
	end
			
onevent button.forward
switch=1
onevent button.backward
switch=0
				]]></node>


</network>
